% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulate.R
\name{simulate.stvar}
\alias{simulate.stvar}
\title{Simulate method for class 'stvar' objects}
\usage{
\method{simulate}{stvar}(
  object,
  nsim = 1,
  seed = NULL,
  ...,
  init_values = NULL,
  init_regime,
  ntimes = 1,
  burnin = 1000,
  drop = TRUE,
  girf_pars = NULL
)
}
\arguments{
\item{object}{an object of class \code{'stvar'}.}

\item{nsim}{number of observations to be simulated.}

\item{seed}{set seed for the random number generator?}

\item{...}{currently not in use.}

\item{init_values}{a size \eqn{(pxd)} matrix specifying the initial values, where d is the number
of time series in the system. The \strong{last} row will be used as initial values for the first lag,
the second last row for second lag etc. If not specified, initial values will be drawn from
the regime specified in \code{init_regimes} (for Gaussian models only).}

\item{init_regime}{an integer in \eqn{1,...,M} specifying the regime from which
the initial values should be generated from. The initial values will be generated
from the stationary distribution of the specific regime. Due to the lack of
knowledge of the stationary distribution, models with other than Gaussian conditional distribution
use a simulation procedure with a burn-in period. See the details section.}

\item{ntimes}{how many sets of simulations should be performed?}

\item{burnin}{Burn-in period for simulating initial values from a regime when \code{cond_dist!="Gaussian"}.
See the details section.}

\item{drop}{if \code{TRUE} (default) then the components of the returned list are coerced to lower dimension if
\code{ntimes==1}, i.e., \code{$sample} and \code{$transition_weights} will be matrices, and \code{$component}
 will be vector.}

\item{girf_pars}{This argument is used internally in the estimation of generalized impulse response functions
(see \code{?GIRF}). You should ignore it (specifying something else than null to it will change how the function behaves).}
}
\value{
If \code{drop==TRUE} and \code{ntimes==1} (default): \code{$sample}, \code{$component}, and \code{$transition_weights}
  are matrices. Otherwise, returns a list with...
  \describe{
    \item{\code{$sample}}{a size (\code{nsim}\eqn{ x d x }\code{ntimes}) array containing the samples: the dimension
     \code{[t, , ]} is the time index, the dimension \code{[, d, ]} indicates the marginal time series, and the dimension
     \code{[, , i]} indicates the i:th set of simulations.}
    \item{\code{$transition_weights}}{a size (\code{nsim}\eqn{ x M x }\code{ntimes}) array containing the transition weights
     corresponding to the sample: the dimension \code{[t, , ]} is the time index, the dimension \code{[, m, ]} indicates the
     regime, and the dimension \code{[, , i]} indicates the i:th set of simulations.}
  }
}
\description{
\code{simulate.stvar} is a simulate method for class 'stvar' objects.
}
\details{
The stationary distribution of each regime is not known when \code{cond_dist!="Gaussian"}. Therefore, when using
  \code{init_regime} to simulate the initial values from a given regime, we employ the following simulation procedure to
  obtain the initial values. First, we set the initial values to the unconditional mean of the specified regime. Then,
  we simulate a large number observations from that regime as specified in the argument \code{burnin}. The first \eqn{p}
  observations obtained after the burn-in period are then set as the initial values obtained from the specified regime.

  The argument \code{ntimes} is intended for forecasting, which is used by the predict method (see \code{?predict.stvar}).
}
\examples{
 # p=2, M=2, d=2, Gaussian relative dens weights
 theta_222relg <- c(0.356914, 0.107436, 0.356386, 0.08633, 0.13996, 0.035172,
   -0.164575, 0.386816, 0.451675, 0.013086, 0.227882, 0.336084, 0.239257, 0.024173,
   -0.021209, 0.707502, 0.063322, 0.027287, 0.009182, 0.197066, 0.205831, 0.005157,
   0.025877, 1.092094, -0.009327, 0.116449, 0.592446)
 mod222relg <- STVAR(data=gdpdef, p=2, M=2, d=2, params=theta_222relg,
   weight_function="relative_dens")

 # Simulate T=200 observations using initial values:
 init_vals <- matrix(c(0.5, 1.0, 0.5, 1), nrow=2)
 sim1 <- simulate(mod222relg, nsim=200, seed=1, init_values=init_vals)
 plot.ts(sim1$sample) # Sample
 plot.ts(sim1$transition_weights) # Transition weights

 # Simulate T=100 observations, with initial values from the 1st regime:
 sim2 <- simulate(mod222relg, nsim=200, seed=1, init_regime=1)
 plot.ts(sim2$sample) # Sample
 plot.ts(sim2$transition_weights) # Transition weights
}
\references{
\itemize{
   \item LÃ¼tkepohl H. 2005. New Introduction to Multiple Time Series Analysis,
         \emph{Springer}.
   \item McElroy T. 2017. Computation of vector ARMA autocovariances.
         \emph{Statistics and Probability Letters}, \strong{124}, 92-96.
   \item References to the STVAR models TO BE INCLUDED.
 }
}
\seealso{
\code{\link{predict.stvar}},\code{\link{GIRF}}, \code{\link{GFEVD}},  \code{\link{fitSTVAR}},
  \code{\link{fitSSTVAR}} \code{\link{STVAR}}
}
